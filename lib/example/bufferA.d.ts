export declare const bufferAFragment = "\n\n\nuniform vec2 resolution;\nuniform float time;\n\nout vec4 fragColor;\n\n#define iTime time\n#define iResolution resolution\n\n#define V vec3//\n#define S .1*sin(q.x+sin(q.z))\n\nmat2 m = mat2(8, 6, -6, 8);\nfloat h, s, t, x, p, d, v;\nV q, z, w, U;\n#define g(p)(q=p,h=abs(S),q.xz*=m*.1,h+S)\nfloat n(V p) {\n    for(p *= .1, s = .08, t = .9; (s /= .4) < 4e2; p += t) t -= g(p) / s, p.xz *= m * .21;\n    return 3. - exp(t);\n}//\nvoid mainImage(out vec4 O, vec2 u) {\n    U = V(u, 0) / iResolution - 1.;\n    for(d = p = x = 0.; d++ < 2e2 && p / 5e3 <= x;) z = V(0, -8. * g(V(0, 0, v = iTime * .2)), v / .1) + p * normalize(U - V(sin(v), U.y * .7 - .1, -3)), p += x = z.y + n(z);\n    O.rgb = d / 5e2 + .1 + .1 * log(p) - dot(V(w.z = .01), normalize(V(n(z - w.zyx), x = n(z), n(z - w) - n(z.zyx * 11.) / 5e2) - x)) * n(z.zyx * 6.) * V(5, 10, 15);\n}\n\n\nvoid main(){\n\n    mainImage(fragColor,gl_FragCoord.xy);\n\n}";
//# sourceMappingURL=bufferA.d.ts.map