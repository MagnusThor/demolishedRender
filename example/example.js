"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var src_1 = require("../src");
var Example = (function () {
    function Example() {
    }
    Example.run = function () {
        var player;
        var vertex = "layout(location = 0) in vec2 pos; \n        out vec4 fragColor;\n        void main() { \n            gl_Position = vec4(pos.xy,0.0,1.0);\n        }";
        var fragment = "uniform float time;uniform vec2 mouse,resolution;uniform sampler2D iChannel0,iChannel1,iChannel2,iChannel3,iChannel4,fft;out vec4 fragColor;\n#define RAY_STEPS 100\n#define SHADOW_STEPS 50\n#define LIGHT_COLOR vec3(1.,.97,.93)\n#define AMBIENT_COLOR vec3(.75,.65,.6)\n#define SPECULAR 0.65\n#define DIFFUSE 1.0\n#define AMBIENT 0.35\n#define BRIGHTNESS 1.5\n#define GAMMA 1.35\n#define SATURATION.8\n#define detail.00004\n#define t time*.2\nvec3 lightdir=normalize(vec3(.1,-.15,-1.));const vec3 origin=vec3(-1.,.2,0.);float det=0.;vec3 pth1;mat2 rot(float v){return mat2(cos(v),sin(v),-sin(v),cos(v));}vec4 formula(vec4 v){return v.rb=abs(v.rb+1.)-abs(v.rb-1.)-v.rb,v=v*2./clamp(dot(v.rgb,v.rgb),.15,1.)-vec4(.5,.5,.8,0.),v.rg*=rot(.5),v;}float screen(vec3 v){float m=length(v.gb-vec2(.25,0.))-.5,i=length(v.gb-vec2(.25,2.))-.5;return min(max(m,abs(v.r-.3)-.01),max(i,abs(v.r+2.3)-.01));}vec2 de(vec3 v){float r=0.;vec3 m=v;m.b=abs(2.-mod(m.b,4.));vec4 i=vec4(m,1.5);float c=max(0.,.35-abs(v.g-3.35))/.35;\n#ifdef LESSDETAIL\nfor(int f=0;f<6;f++)i=formula(i);float f=max(-m.r-4.,(length(max(vec2(0.),i.gb-2.))-.5)/i.a);\n#else\nfor(int b=0;b<8;b++)i=formula(i);float d=max(-m.r-4.,length(max(vec2(0.),i.gb-3.))/i.a);\n#endif\nfloat b=screen(m),l=min(b,d);if(abs(l-b)<.001)r=1.;return vec2(l,r);}vec2 colorize(vec3 v){v.b=abs(2.-mod(v.b,4.));float m,i=m=0.,r=1000.;for(int f=0;f<15;f++){v=formula(vec4(v,0.)).rgb;float b=i;i=length(v);m+=exp(-10./abs(i-b));r=min(r,abs(i-3.));}return vec2(m,r);}vec3 path(float v){vec3 r=vec3(sin(v)*2.,(1.-sin(v*.5))*.5,-cos(v*.25)*30.)*.5;return r;}vec3 normal(vec3 v){vec3 m=vec3(0.,det,0.);return normalize(vec3(de(v+m.grr).r-de(v-m.grr).r,de(v+m.rgr).r-de(v-m.rgr).r,de(v+m.rrg).r-de(v-m.rrg).r));}float shadow(vec3 v,vec3 r){float m=1.,i=2.*det,f=10.;for(int b=0;b<SHADOW_STEPS;b++){if(i<1.&&f>detail){vec3 l=v-i*r;f=de(l).r;m=min(m,max(50.*f/i,0.));i+=max(.01,f);}}return clamp(m,.1,1.);}float calcAO(const vec3 v,const vec3 m){float r=detail*40.,f=0.,i=13.;for(int b=0;b<5;b++){float d=r*float(b*b);vec3 l=m*d+v;float c=de(l).r;f+=-(c-d)*i;i*=.7;}return clamp(1.-5.*f,0.,1.);}vec3 light(in vec3 v,in vec3 m,in vec3 r,in float i){float b=shadow(v,lightdir),f=calcAO(v,r),d=max(0.,dot(lightdir,-r))*b*DIFFUSE;vec3 l=max(.5,dot(m,-r))*AMBIENT*AMBIENT_COLOR,a=reflect(lightdir,r);float c=pow(max(0.,dot(m,-a))*b,15.)*SPECULAR;vec3 p;vec2 s=colorize(v);if(i>.5)p=vec3(1.),c=c*c;else{float g=pow(s.r*.11,2.);p=mix(vec3(g,g*g,g*g),vec3(g),.5)+.1;p+=pow(max(0.,1.-s.g),5.)*.3;}p=p*f*(l+d*LIGHT_COLOR)+c*LIGHT_COLOR;if(i>.5){vec3 n=v;n.b=abs(1.-mod(n.b,2.));vec3 g=texture(iChannel0,mod(1.-v.bg-vec2(.4,.2),vec2(1.))).rgb*2.;p+=g*abs(.01-mod(v.g-time*.1,.02))/.01*f;p*=max(0.,1.-pow(length(n.gb-vec2(.25,1.)),2.)*3.5);}else{vec3 g=texture(iChannel0,mod(v.br*2.+vec2(.5),vec2(1.))).rgb;g*=abs(.01-mod(v.r-time*.1*sign(v.r+1.),.02))/.01;p+=pow(s.r,10.)*3e-10*g;p+=pow(max(0.,1.-s.g),4.)*pow(max(0.,1.-abs(1.-mod(v.b+time*2.,4.))),2.)*vec3(1.,.8,.4)*4.*max(0.,.05-abs(v.r+1.))/.05;}return p;}vec3 raymarch(in vec3 v,in vec3 m){float r,i,b=r=0.;vec2 f=vec2(1.,0.);vec3 l,c=vec3(0.);for(int p=0;p<RAY_STEPS;p++){if(f.r>det&&b<30.){l=v+b*m;f=de(l);det=detail*(1.+b*50.);b+=f.r;if(f.r<.015)r+=max(0.,.015-f.r)*exp(-b);}}float g=max(0.,dot(normalize(-m),normalize(lightdir)));vec3 d=vec3(max(0.,-m.g+.6))*AMBIENT_COLOR*.5*max(.4,g);if(f.r<det||b<30.){l=l-abs(f.r-det)*m;vec3 p=normal(l);c=light(l,m,p,f.g);c=mix(c,d,1.-exp(-.15*pow(b,1.5)));}else{c=d;vec3 p=(m*3.+vec3(1.3,2.5,1.25))*.3;for(int n=0;n<13;n++)p=abs(p)/dot(p,p)-.9;c+=min(1.,pow(min(5.,length(p)),3.)*.0025);}vec3 p=LIGHT_COLOR*pow(g,25.)*.5;c+=r*(.5+g*.5)*LIGHT_COLOR*.7;c+=p*exp(min(30.,b)*.02);return c;}vec3 move(inout vec3 v){vec3 m=path(t),i=path(t+.7);float r=de(i).r;vec3 f=normalize(i-m);float b=i.r-m.r;b*=min(1.,abs(i.b-m.b))*sign(i.b-m.b)*.7;v.rg*=mat2(cos(b),sin(b),-sin(b),cos(b));b=f.g*1.7;v.gb*=mat2(cos(b),sin(b),-sin(b),cos(b));b=atan(f.r,f.b);v.rb*=mat2(cos(b),sin(b),-sin(b),cos(b));return m;}void main(){pth1=path(t+.3)+origin;vec2 v=gl_FragCoord.rg/resolution.rg*2.-1.;v.g*=resolution.g/resolution.r;vec3 b=normalize(vec3(v*.8,1.)),i=origin+move(b),m=raymarch(i,b);m=clamp(m,vec3(0.),vec3(1.));m=pow(m,vec3(GAMMA))*BRIGHTNESS;m=mix(vec3(length(m)),m,SATURATION);fragColor=vec4(m,1.);}\n";
        var mainVertex = "layout(location = 0) in vec2 pos; \n        out vec4 fragColor;                \n        void main() { \n            gl_Position = vec4(pos.xy,0.0,1.0);\n        }";
        var mainFragment = "uniform float time;\n        uniform vec2 resolution;\n        uniform sampler2D bufferA;\n        //uniform sampler2D bufferB;\n        out vec4 fragColor;\n        vec3 mod289(vec3 x) {\n                return x - floor(x * (1.0 / 289.0)) * 289.0;\n              }\n              \n              vec2 mod289(vec2 x) {\n                return x - floor(x * (1.0 / 289.0)) * 289.0;\n              }\n              \n              vec3 permute(vec3 x) {\n                return mod289(((x*34.0)+1.0)*x);\n              }\n              \n              float snoise(vec2 v)\n                {\n                const vec4 C = vec4(0.211324865405187, \n                                    0.366025403784439, \n                                   -0.577350269189626,  \n                                    0.024390243902439);\n                        vec2 i  = floor(v + dot(v, C.yy) );\n                vec2 x0 = v -   i + dot(i, C.xx);\n              \n                vec2 i1;\n                i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n                vec4 x12 = x0.xyxy + C.xxzz;\n                x12.xy -= i1;\n              \n                i = mod289(i);\n                vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                              + i.x + vec3(0.0, i1.x, 1.0 ));\n              \n                vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n                m = m*m ;\n                m = m*m ;\n              \n                vec3 x = 2.0 * fract(p * C.www) - 1.0;\n                vec3 h = abs(x) - 0.5;\n                vec3 ox = floor(x + 0.5);\n                vec3 a0 = x - ox;\n              \n                m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n              \n                vec3 g;\n                g.x  = a0.x  * x0.x  + h.x  * x0.y;\n                g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n                return 130.0 * dot(m, g);\n              }\n              \n              float rand(vec2 co)\n              {\n                 return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n              }\n                  \n        void main(){                \n\n                /*\n                edge detect\n                float AMP = 4.0;\n\n                vec3 color = texture(bufferA, gl_FragCoord.xy / resolution.xy).rgb;\n\t\n                vec3 Lx = dFdx(color*AMP);\n                vec3 Ly = dFdy(color*AMP);\n                vec3 G = sqrt(Lx*Lx+Ly*Ly);\n                \n                fragColor = vec4(G, 1.0);\n\n                return;\n                */\n\n          vec2 uv = gl_FragCoord.xy / resolution.xy;\n          float noise = max(0.0, snoise(vec2(time, uv.y * 0.3)) - 0.3) * (1.0 / 0.7);\n          noise = noise + (snoise(vec2(time*10.0, uv.y * 2.4)) - 0.5) * 0.15;          \n          float xpos = uv.x - noise * noise * 0.25;\n              fragColor = texture(bufferA, vec2(xpos, uv.y));          \n          fragColor.rgb = mix(fragColor.rgb, vec3(rand(vec2(uv.y * time))), noise * 0.3).rgb;          \n          if (floor(mod(gl_FragCoord.y * 0.25, 2.0)) == 0.0)\n          {\n              fragColor.rgb *= 1.0 - (0.15 * noise);\n          }                                      \n        }";
        var canvas = document.querySelector("#main");
        canvas.width = innerWidth;
        canvas.height = innerHeight;
        player = new src_1.DR(canvas, mainVertex, mainFragment);
        player.addAssets({
            iChannel0: {
                src: "assets/iChannel0.png"
            }
        }, function () {
            player.addBuffer("bufferA", vertex, fragment, ["iChannel0"]);
            var st = 0;
            var loop = function (t) {
                player.render(t / 1000);
                st = (t - st) /
                    requestAnimationFrame(loop);
            };
            setTimeout(function () {
                loop(0);
                console.log("started");
            }, 1000);
        });
    };
    return Example;
}());
exports.Example = Example;
setTimeout(function () {
    Example.run();
}, 3000);
